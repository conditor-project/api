// Laxe JSON Grammar
// ============
//

// ----- 1. Doc -----
// JSON with laxe grammar on Identifier litteral string

// ----- 2. JSON Grammar -----

JsonText
  = _ Value:Value _ { return Value; }

BeginArray     = _ "[" _
BeginObject    = _ "{" _
EndArray       = _ "]" _
EndObject      = _ "}" _
NameSeparator  = _ ":" _
ValueSeparator = _ "," _

_
 = Whitespace*

Whitespace "Whitespace" = [ \t\n\r]

// ----- 3. Values -----

Value
  = False
  / Null
  / True
  / Object
  / Array
  / Number
  / StringLiteral

False = "false" { return false; }
Null  = "null"  { return null;  }
True  = "true"  { return true;  }

// ----- 4. Objects -----

Object
  = BeginObject
    members:(
      head:Member
      tail:(ValueSeparator m:Member { return m; })*
      {
        var result = {};

        [head].concat(tail).forEach(function(element) {
          result[element.name] = element.Value;
        });

        return result;
      }
    )?
    EndObject
    { return members !== null ? members: {}; }

Member
  = name:StringLiteral NameSeparator Value:Value {
      return { name: name, Value: Value };
    }

// ----- 5. Arrays -----

Array
  = BeginArray
    values:(
      head:Value
      tail:(ValueSeparator v:Value { return v; })*
      { return [head].concat(tail); }
    )?
    EndArray
    { return values !== null ? values : []; }

// ----- 6. Numbers -----

Number "number"
  = Minus? Int Frac? Exp? { return parseFloat(text()); }

Decimalpoint
  = "."

Digit1_9
  = [1-9]

E
  = [eE]

Exp
  = E (Minus / Plus)? Digit+

Frac
  = Decimalpoint Digit+

Int
  = Zero / (Digit1_9 Digit*)

Minus
  = "-"

Plus
  = "+"

Zero
  = "0"

// ----- 7. Strings -----

StringLiteral "string"
  = '"' chars:DoubleStringCharacter* '"' { return chars.join(""); }
  / "'" chars:SingleStringCharacter* "'" { return chars.join("") }
  /  chars:IdentifierCharacter+ { return chars.join(""); }

DoubleStringCharacter
  = $Char

SingleStringCharacter
  = $(!("'") Char)

IdentifierCharacter
  = [A-Za-z0-9_\-.]

Char
  = Unescaped
  / Escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

Escape
  = "\\"

Unescaped
  = [^\0-\x1F\x22\x5C]

// ----- Core ABNF Rules -----

// See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4234).
Digit  = [0-9]
HexDigit = [0-9a-f]i

ReservedCharacters
  = "+"
  / "-"
  / "="
  / "&&"
  / "||"
  / ">"
  / "<"
  / "!"
  / "("
  / ")"
  / "{"
  / "}"
  / "["
  / "]"
  / "^"
  / '"'
  / "'"
  / "~"
  / "*"
  / "?"
  / ":"
  / "\\"
  / "/"
  / ","
